/*

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};
 */

class Solution {
  public:
    vector<int> leftView(Node *root) {
        vector<int>result;
        if(root == NULL){
            return result;
        }
        
        map<int ,int>mp;
        queue<pair<Node* , int>>q;
        q.push(make_pair(root,0));
        
        while(!q.empty()){
            pair<Node*,int> temp = q.front();
            q.pop();
            
            Node * frontNode = temp.first;
            int level = temp.second;
           if(mp.find(level) == mp.end()){ 
               mp[level] = frontNode->data;
           }
           if(frontNode->left){
                q.push(make_pair(frontNode->left,level+1));
            }
            if(frontNode->right){
                q.push(make_pair(frontNode->right,level+1));
            }
        }
        
        for(auto i:mp){
            result.push_back(i.second);
        }
        
        return result;
    }
};
