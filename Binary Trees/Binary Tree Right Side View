/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int>result;
        if(root == NULL){
            return result;
        }
       
       map<int,int>mp;
       queue<pair<TreeNode* , int>>q;
       q.push(make_pair(root,0));

       while(!q.empty()){
        pair<TreeNode*,int>front = q.front();
        q.pop();

        TreeNode* frontNode = front.first;
        int level = front.second;

        mp[level] = frontNode->val;

        if(frontNode->left){
            q.push(make_pair(frontNode->left , level+1));
        } 
        if(frontNode->right){
            q.push(make_pair(frontNode->right , level+1));
        }
       }

       for(auto it:mp){
        result.push_back(it.second);
       }

     return result;
    }
};


// Time Complexity = Space Complexity = O(N)
