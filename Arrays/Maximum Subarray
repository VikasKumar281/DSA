class Solution {
public:
    int maxSubArray(vector<int>& nums) {

        // Kadane's Algorithm =>
        // Time Complexity = O(n) and Space Complexity = O(1)

        int n = nums.size();
        int maxi = INT_MIN;
        int sum =0;

        for(int i =0;i<n;i++){
            if(sum < 0){
                sum =0;
            }
            sum = sum+ nums[i];
            if(sum > maxi){
               maxi = sum ;
            }
        }
        return maxi; 
    }
};


// Time Complexity = O(n^2) and Space Complexity = O(1)
// class Solution {
// public:
//     int maxSubArray(vector<int>& nums) {
//         int n = nums.size();
//         int maxi = INT_MIN;
       
//         for(int i =0;i<n;i++){
//             int sum =0;
//             for(int j = i;j<n;j++){
//                sum = sum+ nums[j];
//                maxi = max(sum , maxi);
//             }
//         }
//         return maxi; 
//     }
// };
