#include<unordered_map>
#include<queue>
#include<list>


bool isCyclicDfs(unordered_map<int,list<int> > &adj , unordered_map<int,bool> &visited , int node , int parent ){

    visited[node] = 1;
    
        for(auto neighbour: adj[node]){
           if(!visited[neighbour]){
               bool cycleDetected = isCyclicDfs(adj , visited , neighbour , node);
               if(cycleDetected){
                   return true;
               }
           }

           else if(neighbour != parent){
              return true;
           }
        }
    return false;
}


string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    //Create Adjacency List =>
    unordered_map<int,list<int> >adj;
    for( int i =0;i<m;i++){
        int u = edges[i][0];
        int v = edges[i][1];
   
        adj[u].push_back(v);        
        adj[v].push_back(u);
    }

    // To handle Disconnected components =>
    unordered_map<int,bool> visited;
    for(int i =0;i<n; i++){
        if(!visited[i]){
            bool ans = isCyclicDfs(adj , visited , i , -1);
            if(ans == 1){
                return "Yes";
            }
        }
    }

    return "No";

}
